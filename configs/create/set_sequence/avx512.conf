register_size 128
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {"return _mm_set_epi64x(a+b,a);", "return _mm_set_epi32(a+3*b,a+2*b,a+b,a);", "return _mm_set_epi16(a+7*b,a+6*b,a+5*b,a+4*b,a+3*b,a+2*b,a+b,a);", "return _mm_set_epi8(a+15*b,a+14*b,a+13*b,a+12*b,a+11*b,a+10*b,a+9*b,a+8*b,a+7*b,a+6*b,a+5*b,a+4*b,a+3*b,a+2*b,a+b,a);", "return _mm_set_ps(a+3*b,a+2*b,a+b,a);", "return _mm_set_pd(a+b,a);"}
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64","32","16","8","32","64"}
}

register_size 256
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {"return _mm256_set_epi64x(a+3*b,a+2*b,a+b,a);", "return _mm256_set_epi32(a+7*b,a+6*b,a+5*b,a+4*b,a+3*b,a+2*b,a+b,a);", "return _mm256_set_epi16(a+15*b,a+14*b,a+13*b,a+12*b,a+11*b,a+10*b,a+9*b,a+8*b,a+7*b,a+6*b,a+5*b,a+4*b,a+3*b,a+2*b,a+b, a);", "_mm256_set_epi8(a+31*b,a+30*b,a+29*b,a+28*b,a+27*b,a+26*b,a+25*b,a+24*b,a+23*b,a+22*b,a+21*b,a+20*b,a+19*b,a+18*b,a+17*b,a+16*b,a+15*b,a+14*b,a+13*b,a+12*b,a+11*b,a+10*b,a+9*b,a+8*b,a+7*b,a+6*b,a+5*b,a+4*b,a+3*b,a+2*b,a+b,a);", "return _mm256_set_ps(a+7*b,a+6*b,a+5*b,a+4*b,a+3*b,a+2*b,a+b,a);", "return _mm256_set_pd(a+3*b,a+2*b,a+b,a);"}
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64","32","16","8","32","64"}
}

register_size 512
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {"return _mm512_set_epi64(a+7*b,a+6*b,a+5*b,a+4*b,a+3*b,a+2*b,a+b,a);", "return _mm512_set_epi32(a+15*b,a+14*b,a+13*b,a+12*b,a+11*b,a+10*b,a+9*b,a+8*b,a+7*b,a+6*b,a+5*b,a+4*b,a+3*b,a+2*b,a+b,a);", "return _mm512_set_epi16(a+31*b,a+30*b,a+29*b,a+28*b,a+27*b,a+26*b,a+25*b,a+24*b,a+23*b,a+22*b,a+21*b,a+20*b,a+19*b,a+18*b,a+17*b,a+16*b,a+15*b,a+14*b,a+13*b,a+12*b,a+11*b,a+10*b,a+9*b,a+8*b,a+7*b,a+6*b,a+5*b,a+4*b,a+3*b,a+2*b,a+b,a);", "return _mm512_set_epi8(a+63*b,a+62*b,a+61*b,a+60*b,a+59*b,a+58*b,a+57*b,a+56*b,a+55*b,a+54*b,a+53*b,a+52*b,a+51*b,a+50*b,a+49*b,a+48*b,a+47*b,a+46*b,a+45*b,a+44*b,a+43*b,a+42*b,a+41*b,a+40*b,a+39*b,a+38*b,a+37*b,a+36*b,a+35*b,a+34*b,a+33*b,a+32*b,a+31*b,a+30*b,a+29*b,a+28*b,a+27*b,a+26*b,a+25*b,a+24*b,a+23*b,a+22*b,a+21*b,a+20*b,a+19*b,a+18*b,a+17*b,a+16*b,a+15*b,a+14*b,a+13*b,a+12*b,a+11*b,a+10*b,a+9*b,a+8*b,a+7*b,a+6*b,a+5*b,a+4*b,a+3*b,a+2*b,a+b,a);", "return _mm512_set_ps(a+15*b,a+14*b,a+13*b,a+12*b,a+11*b,a+10*b,a+9*b,a+8*b,a+7*b,a+6*b,a+5*b,a+4*b,a+3*b,a+2*b,a+b,a);", "return _mm512_set_pd(a+7*b,a+6*b,a+5*b,a+4*b,a+3*b,a+2*b,a+b,a);"}
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64","32","16","8","32","64"}
}
