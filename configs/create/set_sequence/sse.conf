register_size 128
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {"return _mm_set_epi64x(a+b,a);", "return _mm_set_epi32(a+3*b,a+2*b,a+b,a);", "return _mm_set_epi16(a+7*b,a+6*b,a+5*b,a+4*b,a+3*b,a+2*b,a+b,a);", "return _mm_set_epi8(a+15*b,a+14*b,a+13*b,a+12*b,a+11*b,a+10*b,a+9*b,a+8*b,a+7*b,a+6*b,a+5*b,a+4*b,a+3*b,a+2*b,a+b,a);", "return _mm_set_ps(a+3*b,a+2*b,a+b,a);", "return _mm_set_pd(a+b,a);"}
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64","32","16","8","32","64"}
}
