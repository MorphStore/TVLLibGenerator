register_size 128
{
  base_types = {"uint64_t", "uint32_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
  "__m128d divhelper=_mm_set1_pd(0x0010000000000000); return _mm_xor_si128( _mm_castpd_si128( _mm_add_pd( _mm_floor_pd( _mm_div_pd( _mm_castsi128_pd(p_vec1), _mm_castsi128_pd(p_vec2) ) ), divhelper ) ), _mm_castpd_si128( divhelper ) );",
  "_mm_cvtps_epi32( _mm_floor_ps( _mm_div_ps( _mm_castsi128_ps(p_vec1), _mm_castsi128_ps(p_vec2) ) ) );"
  "return _mm_div_ps( p_vec1, p_vec2);",
  "return _mm_div_pd( p_vec1, p_vec2);"
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8","32","64"}
}

register_size 256
{
  base_types = {"uint64_t", "uint32_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "__m256d divhelper = _mm256_set1_pd(0x0010000000000000); return _mm256_xor_si256( _mm256_castpd_si256( _mm256_add_pd( _mm256_floor_pd( _mm256_div_pd( _mm256_castsi256_pd(p_vec1), _mm256_castsi256_pd(p_vec2) ) ), divhelper ) ), _mm256_castpd_si256( divhelper ) );",
    "return _mm256_cvtps_epi32( _mm256_floor_ps( _mm256_div_ps( _mm256_castsi256_ps(p_vec1), _mm256_castsi256_ps(p_vec2) ) ) );",

    "return _mm256_div_ps( p_vec1, p_vec2);",
    "return _mm256_div_pd( p_vec1, p_vec2);"
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "32","64"}
}
