register_size 128
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "return _mm_srli_epi64(p_data, p_distance);",
    "return _mm_srli_epi32(p_data, p_distance);",
    "return _mm_srli_epi16(p_data, p_distance);",
    "__m128i ff = _mm_set1_epi16(0xFF);
    __m128i v1 = _mm_and_si128(p_data, ff);
    __m128i v2 = _mm_and_si128(_mm_srli_epi16(p_data, 8 + p_distance),ff);

    v1 = _mm_srli_epi16(v1, p_distance);
    v2 = _mm_slli_epi16(v2, 8);

    return (_mm_or_si128(v1,v2)); // could be that this op must be an and."
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8"}
}
