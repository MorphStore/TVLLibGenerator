register_size 128
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "return _mm_min_epi64(p_vec2, p_vec1);",
    "return _mm_blendv_epi8(p_vec2, p_vec1, _mm_cmpgt_epi32(p_vec2, p_vec1));",
    "return _mm_blendv_epi8(p_vec2, p_vec1, _mm_cmpgt_epi16(p_vec2, p_vec1));",
    "return _mm_blendv_epi8(p_vec2, p_vec1, _mm_cmpgt_epi8(p_vec2, p_vec1));",
    "return _mm_blendv_ps(p_vec2, p_vec1, _mm_cmpgt_ps(p_vec2, p_vec1));",
    "return _mm_blendv_pd(p_vec2, p_vec1, _mm_cmpgt_pd(p_vec2, p_vec1));"}
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8","32","64"}
}

register_size 256
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "return _mm256_min_epi64(p_vec2, p_vec1);",
    "return _mm256_min_epi32(p_vec2, p_vec1);",
    "return _mm256_min_epi16(p_vec2, p_vec1);",
    "return _mm256_min_epi8(p_vec2, p_vec1);",
    "return _mm256_min_ps(p_vec2, p_vec1);",
    "return _mm256_min_pd(p_vec2, p_vec1);"
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8","32","64"}
}

register_size 512
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "return _mm512_min_epi64( p_vec1, p_vec2);",
    "return _mm512_min_epi64( p_vec1, p_vec2);",
    "return _mm512_min_epi64( p_vec1, p_vec2);",
    "return _mm512_min_epi64( p_vec1, p_vec2);",
    "return _mm512_min_ps( p_vec1, p_vec2);",
    "return _mm512_min_pd( p_vec1, p_vec2);"
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8","32","64"}
}
