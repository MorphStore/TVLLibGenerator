register_size 128
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "return _mm_sllv_epi64(p_data, p_distance);",
    "return _mm_sllv_epi32(p_data, p_distance);",
    "return _mm_sllv_epi16(p_data, p_distance);",
    "uint8_t distance0 = _mm_extract_epi8(p_distance, 0);
    uint8_t distance1 = _mm_extract_epi8(p_distance, 1);
    uint8_t distance2 = _mm_extract_epi8(p_distance, 2);
    uint8_t distance3 = _mm_extract_epi8(p_distance, 3);
    uint8_t distance4 = _mm_extract_epi8(p_distance, 4);
    uint8_t distance5 = _mm_extract_epi8(p_distance, 5);
    uint8_t distance6 = _mm_extract_epi8(p_distance, 6);
    uint8_t distance7 = _mm_extract_epi8(p_distance, 7);
    uint8_t distance8 = _mm_extract_epi8(p_distance, 8);
    uint8_t distance9 = _mm_extract_epi8(p_distance, 9);
    uint8_t distance10 = _mm_extract_epi8(p_distance, 10);
    uint8_t distance11 = _mm_extract_epi8(p_distance, 11);
    uint8_t distance12 = _mm_extract_epi8(p_distance, 12);
    uint8_t distance13 = _mm_extract_epi8(p_distance, 13);
    uint8_t distance14 = _mm_extract_epi8(p_distance, 14);
    uint8_t distance15 = _mm_extract_epi8(p_distance, 15);
    return _mm_set_epi8(
            (distance15 == 8) ? 0 : (_mm_extract_epi8(p_data, 15) << distance15),
            (distance14 == 8) ? 0 : (_mm_extract_epi8(p_data, 14) << distance14),
            (distance13 == 8) ? 0 : (_mm_extract_epi8(p_data, 13) << distance13),
            (distance12 == 8) ? 0 : (_mm_extract_epi8(p_data, 12) << distance12),
            (distance11 == 8) ? 0 : (_mm_extract_epi8(p_data, 11) << distance11),
            (distance10 == 8) ? 0 : (_mm_extract_epi8(p_data, 10) << distance10),
            (distance9 == 8) ? 0 : (_mm_extract_epi8(p_data, 9) << distance9),
            (distance8 == 8) ? 0 : (_mm_extract_epi8(p_data, 8) << distance8),
            (distance7 == 8) ? 0 : (_mm_extract_epi8(p_data, 7) << distance7),
            (distance6 == 8) ? 0 : (_mm_extract_epi8(p_data, 6) << distance6),
            (distance5 == 8) ? 0 : (_mm_extract_epi8(p_data, 5) << distance5),
            (distance4 == 8) ? 0 : (_mm_extract_epi8(p_data, 4) << distance4),
            (distance3 == 8) ? 0 : (_mm_extract_epi8(p_data, 3) << distance3),
            (distance2 == 8) ? 0 : (_mm_extract_epi8(p_data, 2) << distance2),
            (distance1 == 8) ? 0 : (_mm_extract_epi8(p_data, 1) << distance1),
            (distance0 == 8) ? 0 : (_mm_extract_epi8(p_data, 0) << distance0)

    );"
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8"}
}

register_size 256
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "return _mm256_sllv_epi64(p_data, p_distance);",
    "return _mm256_sllv_epi32(p_data, p_distance);",
    "return _mm256_sllv_epi16(p_data, p_distance);",
    "uint8_t distance0 = _mm256_extract_epi8(p_distance, 0);
    uint8_t distance1 = _mm256_extract_epi8(p_distance, 1);
    uint8_t distance2 = _mm256_extract_epi8(p_distance, 2);
    uint8_t distance3 = _mm256_extract_epi8(p_distance, 3);
    uint8_t distance4 = _mm256_extract_epi8(p_distance, 4);
    uint8_t distance5 = _mm256_extract_epi8(p_distance, 5);
    uint8_t distance6 = _mm256_extract_epi8(p_distance, 6);
    uint8_t distance7 = _mm256_extract_epi8(p_distance, 7);
    uint8_t distance8 = _mm256_extract_epi8(p_distance, 8);
    uint8_t distance9 = _mm256_extract_epi8(p_distance, 9);
    uint8_t distance10 = _mm256_extract_epi8(p_distance, 10);
    uint8_t distance11 = _mm256_extract_epi8(p_distance, 11);
    uint8_t distance12 = _mm256_extract_epi8(p_distance, 12);
    uint8_t distance13 = _mm256_extract_epi8(p_distance, 13);
    uint8_t distance14 = _mm256_extract_epi8(p_distance, 14);
    uint8_t distance15 = _mm256_extract_epi8(p_distance, 15);
    uint8_t distance16 = _mm256_extract_epi8(p_distance, 16);
    uint8_t distance17 = _mm256_extract_epi8(p_distance, 17);
    uint8_t distance18 = _mm256_extract_epi8(p_distance, 18);
    uint8_t distance19 = _mm256_extract_epi8(p_distance, 19);
    uint8_t distance20 = _mm256_extract_epi8(p_distance, 20);
    uint8_t distance21 = _mm256_extract_epi8(p_distance, 21);
    uint8_t distance22 = _mm256_extract_epi8(p_distance, 22);
    uint8_t distance23 = _mm256_extract_epi8(p_distance, 23);
    uint8_t distance24 = _mm256_extract_epi8(p_distance, 24);
    uint8_t distance25 = _mm256_extract_epi8(p_distance, 25);
    uint8_t distance26 = _mm256_extract_epi8(p_distance, 26);
    uint8_t distance27 = _mm256_extract_epi8(p_distance, 27);
    uint8_t distance28 = _mm256_extract_epi8(p_distance, 28);
    uint8_t distance29 = _mm256_extract_epi8(p_distance, 29);
    uint8_t distance30 = _mm256_extract_epi8(p_distance, 30);
    uint8_t distance31 = _mm256_extract_epi8(p_distance, 31);
    return _mm256_set_epi8(
            (distance31 == 8) ? 0 : (_mm256_extract_epi8(p_data, 31) << distance31),
            (distance30 == 8) ? 0 : (_mm256_extract_epi8(p_data, 30) << distance30),
            (distance29 == 8) ? 0 : (_mm256_extract_epi8(p_data, 29) << distance29),
            (distance28 == 8) ? 0 : (_mm256_extract_epi8(p_data, 28) << distance28),
            (distance27 == 8) ? 0 : (_mm256_extract_epi8(p_data, 27) << distance27),
            (distance26 == 8) ? 0 : (_mm256_extract_epi8(p_data, 26) << distance26),
            (distance25 == 8) ? 0 : (_mm256_extract_epi8(p_data, 25) << distance25),
            (distance24 == 8) ? 0 : (_mm256_extract_epi8(p_data, 24) << distance24),
            (distance23 == 8) ? 0 : (_mm256_extract_epi8(p_data, 23) << distance23),
            (distance22 == 8) ? 0 : (_mm256_extract_epi8(p_data, 22) << distance22),
            (distance21 == 8) ? 0 : (_mm256_extract_epi8(p_data, 21) << distance21),
            (distance20 == 8) ? 0 : (_mm256_extract_epi8(p_data, 20) << distance20),
            (distance19 == 8) ? 0 : (_mm256_extract_epi8(p_data, 19) << distance19),
            (distance18 == 8) ? 0 : (_mm256_extract_epi8(p_data, 18) << distance18),
            (distance17 == 8) ? 0 : (_mm256_extract_epi8(p_data, 17) << distance17),
            (distance16 == 8) ? 0 : (_mm256_extract_epi8(p_data, 16) << distance16),
            (distance15 == 8) ? 0 : (_mm256_extract_epi8(p_data, 15) << distance15),
            (distance14 == 8) ? 0 : (_mm256_extract_epi8(p_data, 14) << distance14),
            (distance13 == 8) ? 0 : (_mm256_extract_epi8(p_data, 13) << distance13),
            (distance12 == 8) ? 0 : (_mm256_extract_epi8(p_data, 12) << distance12),
            (distance11 == 8) ? 0 : (_mm256_extract_epi8(p_data, 11) << distance11),
            (distance10 == 8) ? 0 : (_mm256_extract_epi8(p_data, 10) << distance10),
            (distance9 == 8) ? 0 : (_mm256_extract_epi8(p_data, 9) << distance9),
            (distance8 == 8) ? 0 : (_mm256_extract_epi8(p_data, 8) << distance8),
            (distance7 == 8) ? 0 : (_mm256_extract_epi8(p_data, 7) << distance7),
            (distance6 == 8) ? 0 : (_mm256_extract_epi8(p_data, 6) << distance6),
            (distance5 == 8) ? 0 : (_mm256_extract_epi8(p_data, 5) << distance5),
            (distance4 == 8) ? 0 : (_mm256_extract_epi8(p_data, 4) << distance4),
            (distance3 == 8) ? 0 : (_mm256_extract_epi8(p_data, 3) << distance3),
            (distance2 == 8) ? 0 : (_mm256_extract_epi8(p_data, 2) << distance2),
            (distance1 == 8) ? 0 : (_mm256_extract_epi8(p_data, 1) << distance1),
            (distance0 == 8) ? 0 : (_mm256_extract_epi8(p_data, 0) << distance0)
    );"
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8"}
}

register_size 512
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "return _mm512_sllv_epi64(p_data, p_distance);",
    "return _mm512_sllv_epi32(p_data, p_distance);",
    "return _mm512_sllv_epi16(p_data, p_distance);",
    "__m512i ff = _mm512_set1_epi16(0xFF);
    __m512i v1 = _mm512_and_si512(p_vec, ff);
    __m512i v2 = _mm512_and_si512(_mm512_srli_epi16(p_vec, 8), ff);
    __m512i p1 = _mm512_and_si512(p_distance, ff);
    __m512i p2 = _mm512_and_si512(_mm512_srli_epi16(p_distance, 8), ff);

    v1 = _mm512_and_si512(_mm512_sllv_epi16(v1, p1), ff);
    v2 = _mm512_slli_epi16(_mm512_and_si512(_mm512_sllv_epi16(v2, p2), ff), 8);
    return _mm512_or_si512(v1, v2);"
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8","32","64"}
}
