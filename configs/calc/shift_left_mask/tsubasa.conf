register_size 16384
{
  base_types = {"uint64_t"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {"
   
       uint64_t masks[4];
       uint64_t masks_carry[4];
       masks[3] = 0;
       for (unsigned i=0; i<3; i++){
        masks_carry[2-i] = _vel_svm_sms(p_mask,i);
         masks_carry[2-i] = masks_carry[2-i] >> 63; 
       }
       for (unsigned i=0; i<4; i++){
        masks[3-i] = _vel_svm_sms(p_mask,i);
        masks[3-i] = masks[3-i] << 1;
        masks[3-i] |= masks_carry[3-i]; 
       }
       tsubasa<v16384<uint64_t>>::mask_t final_mask;
       final_mask =_vel_vfmklaf_ml(256);
       for (unsigned i=0; i<4; i++){ 
        final_mask = _vel_lvm_mmss(final_mask, i, masks[3-i]);
        }
        return final_mask;"}
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 0
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = { }
}
