register_size 128
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "uint64_t distance0 = _mm_extract_epi64(p_distance, 0);
    uint64_t distance1 = _mm_extract_epi64(p_distance, 1);
    return _mm_set_epi64x(
            (distance1 == 64) ? 0 : (_mm_extract_epi64(p_data, 1) >> distance1),
            (distance0 == 64) ? 0 : (_mm_extract_epi64(p_data, 0) >> distance0)
    );",
    "uint32_t distance0 = _mm_extract_epi32(p_distance, 0);
    uint32_t distance1 = _mm_extract_epi32(p_distance, 1);
    uint32_t distance2 = _mm_extract_epi32(p_distance, 2);
    uint32_t distance3 = _mm_extract_epi32(p_distance, 3);
    return _mm_set_epi32(
            (distance3 == 32) ? 0 : (_mm_extract_epi32(p_data, 3) >> distance3),
            (distance2 == 32) ? 0 : (_mm_extract_epi32(p_data, 2) >> distance2),
            (distance1 == 32) ? 0 : (_mm_extract_epi32(p_data, 1) >> distance1),
            (distance0 == 32) ? 0 : (_mm_extract_epi32(p_data, 0) >> distance0)

    );",
    "uint16_t distance0 = _mm_extract_epi16(p_distance, 0);
    uint16_t distance1 = _mm_extract_epi16(p_distance, 1);
    uint16_t distance2 = _mm_extract_epi16(p_distance, 2);
    uint16_t distance3 = _mm_extract_epi16(p_distance, 3);
    uint16_t distance4 = _mm_extract_epi16(p_distance, 4);
    uint16_t distance5 = _mm_extract_epi16(p_distance, 5);
    uint16_t distance6 = _mm_extract_epi16(p_distance, 6);
    uint16_t distance7 = _mm_extract_epi16(p_distance, 7);
    return _mm_set_epi16(
            (distance7 == 16) ? 0 : (_mm_extract_epi16(p_data, 7) >> distance7),
            (distance6 == 16) ? 0 : (_mm_extract_epi16(p_data, 6) >> distance6),
            (distance5 == 16) ? 0 : (_mm_extract_epi16(p_data, 5) >> distance5),
            (distance4 == 16) ? 0 : (_mm_extract_epi16(p_data, 4) >> distance4),
            (distance3 == 16) ? 0 : (_mm_extract_epi16(p_data, 3) >> distance3),
            (distance2 == 16) ? 0 : (_mm_extract_epi16(p_data, 2) >> distance2),
            (distance1 == 16) ? 0 : (_mm_extract_epi16(p_data, 1) >> distance1),
            (distance0 == 16) ? 0 : (_mm_extract_epi16(p_data, 0) >> distance0)

    );",
    "uint8_t distance0 = _mm_extract_epi8(p_distance, 0);
    uint8_t distance1 = _mm_extract_epi8(p_distance, 1);
    uint8_t distance2 = _mm_extract_epi8(p_distance, 2);
    uint8_t distance3 = _mm_extract_epi8(p_distance, 3);
    uint8_t distance4 = _mm_extract_epi8(p_distance, 4);
    uint8_t distance5 = _mm_extract_epi8(p_distance, 5);
    uint8_t distance6 = _mm_extract_epi8(p_distance, 6);
    uint8_t distance7 = _mm_extract_epi8(p_distance, 7);
    uint8_t distance8 = _mm_extract_epi8(p_distance, 8);
    uint8_t distance9 = _mm_extract_epi8(p_distance, 9);
    uint8_t distance10 = _mm_extract_epi8(p_distance, 10);
    uint8_t distance11 = _mm_extract_epi8(p_distance, 11);
    uint8_t distance12 = _mm_extract_epi8(p_distance, 12);
    uint8_t distance13 = _mm_extract_epi8(p_distance, 13);
    uint8_t distance14 = _mm_extract_epi8(p_distance, 14);
    uint8_t distance15 = _mm_extract_epi8(p_distance, 15);
    return _mm_set_epi8(
            (distance15 == 8) ? 0 : (_mm_extract_epi8(p_data, 15) >> distance15),
            (distance14 == 8) ? 0 : (_mm_extract_epi8(p_data, 14) >> distance14),
            (distance13 == 8) ? 0 : (_mm_extract_epi8(p_data, 13) >> distance13),
            (distance12 == 8) ? 0 : (_mm_extract_epi8(p_data, 12) >> distance12),
            (distance11 == 8) ? 0 : (_mm_extract_epi8(p_data, 11) >> distance11),
            (distance10 == 8) ? 0 : (_mm_extract_epi8(p_data, 10) >> distance10),
            (distance9 == 8) ? 0 : (_mm_extract_epi8(p_data, 9) >> distance9),
            (distance8 == 8) ? 0 : (_mm_extract_epi8(p_data, 8) >> distance8),
            (distance7 == 8) ? 0 : (_mm_extract_epi8(p_data, 7) >> distance7),
            (distance6 == 8) ? 0 : (_mm_extract_epi8(p_data, 6) >> distance6),
            (distance5 == 8) ? 0 : (_mm_extract_epi8(p_data, 5) >> distance5),
            (distance4 == 8) ? 0 : (_mm_extract_epi8(p_data, 4) >> distance4),
            (distance3 == 8) ? 0 : (_mm_extract_epi8(p_data, 3) >> distance3),
            (distance2 == 8) ? 0 : (_mm_extract_epi8(p_data, 2) >> distance2),
            (distance1 == 8) ? 0 : (_mm_extract_epi8(p_data, 1) >> distance1),
            (distance0 == 8) ? 0 : (_mm_extract_epi8(p_data, 0) >> distance0)

    );"
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8"}
}
