register_size 128
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "return _mm_castpd_si128( _mm_mul_pd( _mm_castsi128_pd(p_vec1), _mm_castsi128_pd(p_vec2) ) );",
  "return _mm_mullo_epi32( p_vec1, p_vec2);",
  "return _mm_mullo_epi16( p_vec1, p_vec2);",
  "__m128i dst_even = _mm_mullo_epi16(p_vec1, p_vec2);
  __m128i dst_odd = _mm_mullo_epi16(_mm_srli_epi16(p_vec1, 8),_mm_srli_epi16(p_vec2, 8));
  return _mm_or_si128(
    _mm_slli_epi16(dst_odd, 8),
    _mm_srli_epi16(
       _mm_slli_epi16(dst_even, 8),
       8
    )
    );",
  "return _mm_mul_ps( p_vec1, p_vec2);",
  "return _mm_mul_pd( p_vec1, p_vec2);"}
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8","32","64"}
}

 
 