register_size 64
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "return (scalar<v64<uint64_t>>::mask_t)(p_vec1 > p_vec2);",
    "return (scalar<v32<uint32_t>>::mask_t)(p_vec1 > p_vec2);",
    "return (scalar<v16<uint16_t>>::mask_t)(p_vec1 > p_vec2);",
    "return (scalar<v8<uint8_t>>::mask_t)(p_vec1 > p_vec2);",
    "return (scalar<v32<float>>::mask_t)(p_vec1 > p_vec2);",
    "return (scalar<v64<double>>::mask_t)(p_vec1 > p_vec2);"
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8", "32", "64"}
}
