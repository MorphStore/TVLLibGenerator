register_size 128
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "return
       _mm_movemask_pd(
          _mm_castsi128_pd(
             _mm_cmpgt_epi64(p_vec1, p_vec2)
          )
      );",

    "return
       _mm_movemask_ps(
          _mm_castsi128_ps(
             _mm_cmpgt_epi32(p_vec1, p_vec2)
          )
       );",

    "__m128i res = _mm_cmpgt_epi16(p_vec1, p_vec2);
     res = _mm_shuffle_epi32(res, 0b11011000);
     res = _mm_shufflehi_epi16(res, 0b11011000);
     res = _mm_shufflelo_epi16(res, 0b11011000);
     uint16_t a = _mm_movemask_ps(
                    _mm_castsi128_ps(
                       _mm_slli_epi32(res, 16)
                    )
                 );
     uint16_t b = _mm_movemask_ps(
                    _mm_castsi128_ps(res)
                 );
     return (b<<4) | a;",

    "return _mm_movemask_epi8( _mm_cmpgt_epi8(p_vec1, p_vec2) );",

    "return _mm_movemask_ps( _mm_cmpgt_ps(p_vec1, p_vec2) );",

    "return _mm_movemask_pd( _mm_cmpgt_pd(p_vec1, p_vec2) );"
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8", "32", "64"}
}
