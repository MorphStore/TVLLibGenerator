register_size 128
{
  base_types = {"uint64_t", "uint32_t","uint16_t","uint8_t"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {"return p_mask;","return p_mask;","return p_mask;","return p_mask;"} 
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 0
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = { }
}
