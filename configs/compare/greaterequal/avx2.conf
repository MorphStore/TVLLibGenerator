register_size 128
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "return
       _mm_movemask_pd(
          _mm_castsi128_pd(
              _mm_or_si128(
                 _mm_cmpeq_epi64(p_vec1, p_vec2),
                 _mm_cmpgt_epi64(p_vec1, p_vec2)
              )
          )
      );",

    "return
       _mm_movemask_ps(
          _mm_castsi128_ps(
              _mm_or_si128(
                _mm_cmpeq_epi32(p_vec1, p_vec2),
                _mm_cmpgt_epi32(p_vec1, p_vec2)
             )
          )
       );",

    "__m128i res = _mm_or_si128(
                     _mm_cmpeq_epi16(p_vec1, p_vec2),
                     _mm_cmpgt_epi16(p_vec1, p_vec2)
                  );
     res = _mm_shuffle_epi32(res, 0b11011000);
     res = _mm_shufflehi_epi16(res, 0b11011000);
     res = _mm_shufflelo_epi16(res, 0b11011000);
     uint16_t a = _mm_movemask_ps(
                    _mm_castsi128_ps(
                       _mm_slli_epi32(res, 16)
                    )
                 );
     uint16_t b = _mm_movemask_ps(
                    _mm_castsi128_ps(res)
                 );
     return (b<<4) | a;",

    "return _mm_movemask_epi8(
              _mm_or_si128(
                _mm_cmpeq_epi8(p_vec1, p_vec2),
                _mm_cmpgt_epi8(p_vec1, p_vec2)
              )
            );",

    "return _mm_movemask_ps( _mm_cmp_ps(p_vec1, p_vec2, 29) ); //non-signalling ordered equal",

    "return _mm_movemask_pd( _mm_cmp_pd(p_vec1, p_vec2, 29) ); //non-signalling ordered equal"}
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8", "32", "64"}
}

register_size 256
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "_mm256_movemask_pd(
       _mm256_castsi256_pd(
          _mm256_or_si256(
             _mm256_cmpeq_epi64(p_vec1, p_vec2),
             _mm256_cmpgt_epi64(p_vec1, p_vec2)
          )
       )
    );",

    "return
       _mm256_movemask_ps(
          _mm256_castsi256_ps(
             _mm256_or_si256(
                _mm256_cmpeq_epi32(p_vec1, p_vec2),
                _mm256_cmpgt_epi32(p_vec1, p_vec2)
             )
          )
       );",

    "__m256i res = _mm256_or_si256(
       _mm256_cmpeq_epi16(p_vec1, p_vec2),
       _mm256_cmpgt_epi16(p_vec1, p_vec2)
    );
    __m256i shift = _mm256_set_epi32(16,16,16,16,0,0,0,0);
    __m256i vec_and = _mm256_set1_epi32(0xffff);
    __m256i res_vec_p1 = _mm256_and_si256(
                      _mm256_srlv_epi32(
                         _mm256_permute4x64_epi64(res, 0b01000100)
                         , shift
                      ),
                      vec_and
                   );
    __m256i res_vec_p2 = _mm256_and_si256(
       _mm256_srlv_epi32(
          _mm256_permute4x64_epi64(res, 0b11101110),
          shift
       ),
       vec_and
    );
    uint16_t a = _mm256_movemask_ps(
                      _mm256_castsi256_ps(
                         _mm256_slli_epi32(
                            _mm256_castps_si256(
                               _mm256_permute_ps(
                                  _mm256_castsi256_ps(
                                     _mm256_permute4x64_epi64(res_vec_p1, 216)
                                  ),
                                  216
                               )
                            ),
                            16
                         )
                      )
                   );
    uint16_t b = _mm256_movemask_ps(
                      _mm256_castsi256_ps(
                         _mm256_slli_epi32(
                            _mm256_castps_si256(
                               _mm256_permute_ps(
                                  _mm256_castsi256_ps(
                                     _mm256_permute4x64_epi64(res_vec_p2, 216)
                                  ),
                                  216
                               )
                            ),
                            16
                         )
                      )
                   );
    return (b << 8) | a ;",

    "return _mm256_movemask_epi8(
             _mm256_or_si256(
                _mm256_cmpeq_epi8(p_vec1, p_vec2),
                _mm256_cmpgt_epi8(p_vec1, p_vec2)
              )
          );",

    "return _mm256_movemask_ps( _mm256_cmp_ps(p_vec1, p_vec2, 29) ); //non-signalling ordered",

    "return _mm256_movemask_pd( _mm256_cmp_pd(p_vec1, p_vec2, 29) ); //non-signalling ordered"
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8", "32", "64"}
}
