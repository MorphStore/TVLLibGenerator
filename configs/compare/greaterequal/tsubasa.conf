register_size 16384
{
  base_types = {"uint64_t"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {" //tsubasa<v16384<uint64_t>>::vector_t v_compare = _vel_vcmpsl_vvvl( p_vec1, p_vec2, element_count );
//    return _vel_orm_mmm(_vel_vfmklgt_mvl( v_compare, element_count ),_vel_vfmkleq_mvl( v_compare, element_count ));
	return _vel_vfmklge_mvl(_vel_vcmpsl_vvvl( p_vec1, p_vec2, element_count ), element_count);

	"} 
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64"}
}
