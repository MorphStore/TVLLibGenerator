register_size 128
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "return _mm_cmpge_epi64_mask(p_vec1, p_vec2);",

    "return _mm_cmpge_epi32_mask(p_vec1, p_vec2);",

    "return _mm_cmpge_epi16_mask(p_vec1, p_vec2);",

    "return _mm_cmpge_epi8_mask(p_vec1, p_vec2);",

    "return _mm_cmp_ps_mask(p_vec1, p_vec2, 29); //non-signalling ordered",

    "return _mm_cmp_pd_mask(p_vec1, p_vec2, 29); //non-signalling ordered"
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8", "32", "64"}
}

register_size 256
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "return _mm256_cmpge_epi64_mask(p_vec1, p_vec2);",

    "return _mm256_cmpge_epi32_mask(p_vec1, p_vec2);",

    "return _mm256_cmpge_epi16_mask(p_vec1, p_vec2);",

    "return _mm256_cmpge_epi8_mask(p_vec1, p_vec2);",

    "return _mm256_cmp_ps_mask(p_vec1, p_vec2, 29); //non-signalling ordered equal",

    "return _mm256_cmp_pd_mask(p_vec1, p_vec2, 29); //non-signalling ordered equal"
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8", "32", "64"}
}

register_size 512
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t", "float", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "return _mm512_cmpge_epi64_mask(p_vec1, p_vec2);",

    "return _mm512_cmpge_epi32_mask(p_vec1, p_vec2);",

    "return _mm512_cmpge_epi16_mask(p_vec1, p_vec2);",

    "return _mm512_cmpge_epi8_mask(p_vec1, p_vec2);",

    "return _mm512_cmp_ps_mask(p_vec1, p_vec2, 29); //non-signalling ordered",

    "return _mm512_cmp_pd_mask(p_vec1, p_vec2, 29); //non-signalling ordered"
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 1
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"64", "32", "16", "8", "32", "64"}
}
