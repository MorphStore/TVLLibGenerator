register_size 16384
{
  base_types = {"uint64_t"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {"typename tsubasa<v16384<uint64_t>>::vector_t vy = _vel_vsfa_vvssl(p_vec, 3, reinterpret_cast<uint64_t>(p_DataPtr), element_count); // shift left by 3 and add a, should depend from scale
         return _vel_vgt_vvssl(vy, 
                              0, //lowest address reinterpret_cast<uint64_t> (p_DataPtr)
                              0, //highest address
                              element_count);"} 
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 2
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m} 
  template_parameters = {"iov::ALIGNED","64"}
}
 