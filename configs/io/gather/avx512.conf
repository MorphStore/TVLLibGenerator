register_size 512
{
  base_types = {"uint64_t"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {"return _mm512_i64gather_epi64( p_vec,reinterpret_cast<typename avx512< v512< uint64_t > >::vector_t const *> (p_DataPtr), sizeof(uint64_t) );"}
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 2
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"iov::UNALIGNED","64"}
}

register_size 256
{
  base_types = {"uint64_t"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {" return _mm256_i64gather_epi64( reinterpret_cast<const long long int *> (p_DataPtr), p_vec,  sizeof(uint64_t) );"}
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 2
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"iov::UNALIGNED","64"}
}

register_size 128
{
  base_types = {"uint64_t"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {"return _mm_i64gather_epi64( reinterpret_cast<const long long int *> (p_DataPtr), p_vec,  sizeof(uint64_t) );"}
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 2
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"iov::UNALIGNED","64"}
}
