register_size 16384
{
  base_types = {"uint64_t","uint64_t"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = { " typename tsubasa<v16384<uint64_t>>::vector_t help_vec = _vel_pvbrd_vsl(0, element_count); //against undefined behaviour
  tsubasa<v16384<uint64_t>>::base_t mask_pop = _vel_pcvm_sml(mask, element_count);	//how much data should be saved
  tsubasa<v16384<uint64_t>>::vector_t save_vec = _vel_vcp_vvmvl(p_vec, mask, help_vec, element_count); //creating a compressed vector to save
  _vel_vst_vssl(save_vec, 8, reinterpret_cast<void*> (p_DataPtr), mask_pop); //saving only the first <mask_pop> elements",
  " typename tsubasa<v16384<uint64_t>>::vector_t help_vec = _vel_pvbrd_vsl(0, element_count); //against undefined behaviour
  tsubasa<v16384<uint64_t>>::base_t mask_pop = _vel_pcvm_sml(mask, element_count);	//how much data should be saved
  typename tsubasa<v16384<uint64_t>>::vector_t save_vec = _vel_vcp_vvmvl(p_vec, mask, help_vec, element_count); //creating a compressed vector to save
  return  _vel_vst_vssl(save_vec, 8, reinterpret_cast<void*> (p_DataPtr), mask_pop); //saving only the first <mask_pop> elements" }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 2
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"iov::UNALIGNED","64","iov::ALIGNED","64"}
}
