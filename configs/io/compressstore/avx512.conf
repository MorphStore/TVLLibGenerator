register_size 128
{
  base_types = {"uint64_t","uint64_t", "uint32_t", "uint32_t", "uint16_t", "uint16_t", "uint8_t", "uint8_t", "float", "float", "double", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "_mm_mask_compressstoreu_epi64((void *)p_DataPtr,mask, p_vec);", "_mm_mask_compressstoreu_epi64((void *)p_DataPtr,mask, p_vec);",
    "_mm_mask_compressstoreu_epi32((void *)p_DataPtr,mask, p_vec);", "_mm_mask_compressstoreu_epi32((void *)p_DataPtr,mask, p_vec);",
    "_mm_mask_compressstoreu_epi16((void *)p_DataPtr,mask, p_vec);//CPUID Flags: AVX512_VBMI2", "_mm_mask_compressstoreu_epi16((void *)p_DataPtr,mask, p_vec);//CPUID Flags: AVX512_VBMI2",
    "_mm_mask_compressstoreu_epi8((void *)p_DataPtr,mask, p_vec);//CPUID Flags: AVX512_VBMI2", "_mm_mask_compressstoreu_epi8((void *)p_DataPtr,mask, p_vec);//CPUID Flags: AVX512_VBMI2",

    "_mm_mask_compressstoreu_ps((void *)p_DataPtr,mask, p_vec);", "_mm_mask_compressstoreu_ps((void *)p_DataPtr,mask, p_vec);",
    "_mm_mask_compressstoreu_pd((void *)p_DataPtr,mask, p_vec);", "_mm_mask_compressstoreu_pd((void *)p_DataPtr,mask, p_vec);"
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 2
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {
    "iov::UNALIGNED","64", "iov::ALIGNED","64",
    "iov::UNALIGNED","32", "iov::ALIGNED","32",
    "iov::UNALIGNED","16", "iov::ALIGNED","16",
    "iov::UNALIGNED","8", "iov::ALIGNED","8",
    "iov::UNALIGNED","32", "iov::ALIGNED","32",
    "iov::UNALIGNED","64", "iov::ALIGNED","64"
  }
}

register_size 256
{
  base_types = {"uint64_t","uint64_t", "uint32_t", "uint32_t", "uint16_t", "uint16_t", "uint8_t", "uint8_t", "float", "float", "double", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "_mm256_mask_compressstoreu_epi64((void *)p_DataPtr,mask, p_vec);", "_mm256_mask_compressstoreu_epi64((void *)p_DataPtr,mask, p_vec);",
    "_mm256_mask_compressstoreu_epi32((void *)p_DataPtr,mask, p_vec);", "_mm256_mask_compressstoreu_epi32((void *)p_DataPtr,mask, p_vec);",
    "_mm256_mask_compressstoreu_epi16((void *)p_DataPtr,mask, p_vec);//CPUID Flags: AVX512_VBMI2", "_mm256_mask_compressstoreu_epi16((void *)p_DataPtr,mask, p_vec);//CPUID Flags: AVX512_VBMI2",
    "_mm256_mask_compressstoreu_epi8((void *)p_DataPtr,mask, p_vec);//CPUID Flags: AVX512_VBMI2", "_mm256_mask_compressstoreu_epi8((void *)p_DataPtr,mask, p_vec);//CPUID Flags: AVX512_VBMI2",

    "_mm256_mask_compressstoreu_ps((void *)p_DataPtr,mask, p_vec);", "_mm256_mask_compressstoreu_ps((void *)p_DataPtr,mask, p_vec);",
    "_mm256_mask_compressstoreu_pd((void *)p_DataPtr,mask, p_vec);", "_mm256_mask_compressstoreu_pd((void *)p_DataPtr,mask, p_vec);"

  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 2
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {
    "iov::UNALIGNED","64", "iov::ALIGNED","64",
    "iov::UNALIGNED","32", "iov::ALIGNED","32",
    "iov::UNALIGNED","16", "iov::ALIGNED","16",
    "iov::UNALIGNED","8", "iov::ALIGNED","8",
    "iov::UNALIGNED","32", "iov::ALIGNED","32",
    "iov::UNALIGNED","64", "iov::ALIGNED","64"
  }
}

register_size 512
{
  base_types = {"uint64_t","uint64_t", "uint32_t", "uint32_t", "uint16_t", "uint16_t", "uint8_t", "uint8_t", "float", "float", "double", "double"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {
    "_mm512_mask_compressstoreu_epi64((void *)p_DataPtr,mask, p_vec);", "_mm512_mask_compressstoreu_epi64((void *)p_DataPtr,mask, p_vec);",
    "_mm512_mask_compressstoreu_epi32((void *)p_DataPtr,mask, p_vec);", "_mm512_mask_compressstoreu_epi32((void *)p_DataPtr,mask, p_vec);",
    "_mm512_mask_compressstoreu_epi16((void *)p_DataPtr,mask, p_vec);//CPUID Flags: AVX512_VBMI2", "_mm512_mask_compressstoreu_epi16((void *)p_DataPtr,mask, p_vec);//CPUID Flags: AVX512_VBMI2",
    "_mm512_mask_compressstoreu_epi8((void *)p_DataPtr,mask, p_vec);//CPUID Flags: AVX512_VBMI2", "_mm512_mask_compressstoreu_epi8((void *)p_DataPtr,mask, p_vec);//CPUID Flags: AVX512_VBMI2",

    "_mm512_mask_compressstoreu_ps((void *)p_DataPtr,mask, p_vec);", "_mm512_mask_compressstoreu_ps((void *)p_DataPtr,mask, p_vec);",
    "_mm512_mask_compressstoreu_pd((void *)p_DataPtr,mask, p_vec);", "_mm512_mask_compressstoreu_pd((void *)p_DataPtr,mask, p_vec);",
  }
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 2
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {
    "iov::UNALIGNED","64", "iov::ALIGNED","64",
    "iov::UNALIGNED","32", "iov::ALIGNED","32",
    "iov::UNALIGNED","16", "iov::ALIGNED","16",
    "iov::UNALIGNED","8", "iov::ALIGNED","8",
    "iov::UNALIGNED","32", "iov::ALIGNED","32",
    "iov::UNALIGNED","64", "iov::ALIGNED","64"
  }
}
