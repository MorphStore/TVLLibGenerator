register_size 128
{
  base_types = {"uint64_t","uint64_t"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = { " switch (mask){
            case 0:    return; //store nothing
            case 1:    _mm_storeu_si128(reinterpret_cast<typename sse< v128< uint64_t > >::vector_t  *>(p_DataPtr),p_vec);
                        return; //store everything
            case 2:    p_vec=_mm_shuffle_epi8(p_vec, _mm_set_epi8(7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8)); //move upper 64 bit to beginning of register and store it to memory
                        _mm_storeu_si128(reinterpret_cast<typename sse< v128< uint64_t > >::vector_t  *>(p_DataPtr),p_vec);
                        return;
            case 3:    _mm_storeu_si128(reinterpret_cast<typename sse< v128< uint64_t > >::vector_t  *>(p_DataPtr),p_vec); //store everything
                        return;
         }

         return ;",
" switch (mask){
            case 0:    return; //store nothing
            case 1:    _mm_storeu_si128(reinterpret_cast<typename sse< v128< uint64_t > >::vector_t  *>(p_DataPtr),p_vec);
                        return; //store everything
            case 2:    p_vec=_mm_shuffle_epi8(p_vec, _mm_set_epi8(7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8)); //move upper 64 bit to beginning of register and store it to memory
                        _mm_storeu_si128(reinterpret_cast<typename sse< v128< uint64_t > >::vector_t  *>(p_DataPtr),p_vec);
                        return;
            case 3:    _mm_storeu_si128(reinterpret_cast<typename sse< v128< uint64_t > >::vector_t  *>(p_DataPtr),p_vec); //store everything
                        return;
         }

         return ; "}
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 2
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m}
  template_parameters = {"iov::UNALIGNED","64","iov::ALIGNED","64"}
}
