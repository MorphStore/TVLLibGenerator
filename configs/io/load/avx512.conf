register_size 128
{
  # Repeating the base types is a work around to to intoduce different template specialization (one repetition per additional specialization), here: aligned and unaligned io variants
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t","uint64_t", "uint32_t", "uint16_t", "uint8_t"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {"return _mm_load_si128(reinterpret_cast<typename sse< v128< uint64_t > >::vector_t const *>(p_DataPtr));","return _mm_load_si128(reinterpret_cast<typename sse< v128< uint32_t > >::vector_t const *>(p_DataPtr));","return _mm_load_si128(reinterpret_cast<typename sse< v128< uint16_t > >::vector_t const *>(p_DataPtr));","return _mm_load_si128(reinterpret_cast<typename sse< v128< uint8_t > >::vector_t const *>(p_DataPtr));","return _mm_loadu_si128(reinterpret_cast<typename sse< v128< uint64_t > >::vector_t const *>(p_DataPtr));","return _mm_loadu_si128(reinterpret_cast<typename sse< v128< uint32_t > >::vector_t const *>(p_DataPtr));","return _mm_loadu_si128(reinterpret_cast<typename sse< v128< uint16_t > >::vector_t const *>(p_DataPtr));","return _mm_loadu_si128(reinterpret_cast<typename sse< v128< uint8_t > >::vector_t const *>(p_DataPtr));"} 
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 2
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m} 
  template_parameters = {"iov::ALIGNED","64","iov::ALIGNED","32","iov::ALIGNED","16","iov::ALIGNED","8","iov::UNALIGNED","64","iov::UNALIGNED","32","iov::UNALIGNED","16","iov::UNALIGNED","8"}
}

register_size 256
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t","uint64_t", "uint32_t", "uint16_t", "uint8_t"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {"return _mm256_load_si256(reinterpret_cast<typename avx2< v256< uint64_t > >::vector_t const *>(p_DataPtr));","return _mm256_load_si256(reinterpret_cast<typename avx2< v256< uint32_t > >::vector_t const *>(p_DataPtr));","return _mm256_load_si256(reinterpret_cast<typename avx2< v256< uint16_t > >::vector_t const *>(p_DataPtr));","return _mm256_load_si256(reinterpret_cast<typename avx2< v256< uint8_t > >::vector_t const *>(p_DataPtr));","return _mm256_loadu_si256(reinterpret_cast<typename avx2< v256< uint64_t > >::vector_t const *>(p_DataPtr));","return _mm256_loadu_si256(reinterpret_cast<typename avx2< v256< uint32_t > >::vector_t const *>(p_DataPtr));","return _mm256_loadu_si256(reinterpret_cast<typename avx2< v256< uint16_t > >::vector_t const *>(p_DataPtr));","return _mm256_loadu_si256(reinterpret_cast<typename avx2< v256< uint8_t > >::vector_t const *>(p_DataPtr));"} 
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 2
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m} 
  template_parameters = {"iov::ALIGNED","64","iov::ALIGNED","32","iov::ALIGNED","16","iov::ALIGNED","8","iov::UNALIGNED","64","iov::UNALIGNED","32","iov::UNALIGNED","16","iov::UNALIGNED","8"}
}

register_size 512
{
  base_types = {"uint64_t", "uint32_t", "uint16_t", "uint8_t","uint64_t", "uint32_t", "uint16_t", "uint8_t"}
  # provide one implementation for each base_type, use the same sequence as for base_types
  implementations = {"return _mm512_load_si512(( void * )(p_DataPtr));","return _mm512_load_si512(( void * )(p_DataPtr));","return _mm512_load_si512(( void * )(p_DataPtr));","return _mm512_load_si512(( void * )(p_DataPtr));","return _mm512_loadu_si512(( void * )(p_DataPtr));","return _mm512_loadu_si512(( void * )(p_DataPtr));","return _mm512_loadu_si512(( void * )(p_DataPtr));","return _mm512_loadu_si512(( void * )(p_DataPtr));"} 
  # number of specialized template parameters exclusing the processing style
  nr_additional_template_parameters = 2
  # additional template specializations. If there is more than 1 template argument and more than 1 base type, follow this sequence: {base type 1/argument1, base type 1/argument 2, ..., base type n/argument 1, base type n/argument 2,..., base type n/argument m} 
  template_parameters = {"iov::ALIGNED","64","iov::ALIGNED","32","iov::ALIGNED","16","iov::ALIGNED","8","iov::UNALIGNED","64","iov::UNALIGNED","32","iov::UNALIGNED","16","iov::UNALIGNED","8"}
}
 